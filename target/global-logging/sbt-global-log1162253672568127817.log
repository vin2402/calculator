[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SHEILA~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SHEILA~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.1 (Oracle Corporation Java 1.8.0_421)
[debug] Load.defaultLoad until apply took 182.9994ms
[debug]           Load.loadUnit: plugins took 133.9434ms
[debug]           Load.loadUnit: defsScala took 0.3438ms
[debug] [Loading] Scanning directory C:\desktop\CalculatorApp\project
[debug]             Load.loadUnit: mkEval took 12.5736ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\desktop\CalculatorApp\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.5696 ms
[info] loading settings for project calculatorapp-build from idea.sbt ...
[debug]               Load.resolveProject(calculatorapp-build) took 60.4294ms
[debug]             Load.loadTransitive: finalizeProject(Project(id calculatorapp-build, base: C:\desktop\CalculatorApp\project, plugins: List(<none>))) took 93.1575ms
[debug] [Loading] Done in C:\desktop\CalculatorApp\project, returning: (calculatorapp-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3962.4603ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.3491ms
[debug]         Load.loadUnit(file:/C:/desktop/CalculatorApp/project/, ...) took 4112.8507ms
[debug]       Load.apply: load took 4396.5744ms
[debug]       Load.apply: resolveProjects took 9.3697ms
[debug]       Load.apply: finalTransforms took 109.6861ms
[debug]       Load.apply: config.delegates took 23.5994ms
[debug]       Load.apply: Def.make(settings)... took 1037.1587ms
[debug]       Load.apply: structureIndex took 148.8662ms
[debug]       Load.apply: mkStreams took 2.3514ms
[info] loading project definition from C:\desktop\CalculatorApp\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 10319.9317ms
[debug]     Load.loadUnit: defsScala took 0.0057ms
[debug] [Loading] Scanning directory C:\desktop\CalculatorApp
[debug]       Load.loadUnit: mkEval took 0.425ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\desktop\CalculatorApp, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.2176 ms
[info] loading settings for project calculatorapp from build.sbt ...
[debug]         Load.resolveProject(calculatorapp) took 47.0924ms
[debug]       Load.loadTransitive: finalizeProject(Project(id calculatorapp, base: C:\desktop\CalculatorApp, plugins: List(<none>))) took 53.0099ms
[debug] [Loading] Done in C:\desktop\CalculatorApp, returning: (calculatorapp)
[debug]     Load.loadUnit: loadedProjectsRaw took 1942.1092ms
[debug]     Load.loadUnit: cleanEvalClasses took 18.9792ms
[debug]   Load.loadUnit(file:/C:/desktop/CalculatorApp/, ...) took 12282.8887ms
[debug] Load.apply: load took 12469.9534ms
[debug] Load.apply: resolveProjects took 0.1753ms
[debug] Load.apply: finalTransforms took 50.1761ms
[debug] Load.apply: config.delegates took 0.3802ms
[debug] Load.apply: Def.make(settings)... took 148.0022ms
[debug] Load.apply: structureIndex took 35.2712ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to CalculatorApp (in build file:/C:/desktop/CalculatorApp/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57847 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57847, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CalculatorApp (in build file:/C:/desktop/CalculatorApp/)
[debug] > Exec(idea-shell, None, None)
